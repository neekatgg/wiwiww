"use strict";define("Analytics/Boards/BurndownQueries",["require","exports","Analytics/Common/AnalyticsCacheableQueryBase","Analytics/Boards/BoardsQueries/DataContracts","Analytics/Boards/BoardsQueries/WitFieldUtilities","Analytics/Common/Utilities/PublicProjectsQueryHelper","Analytics/Common/Utilities/QueryUtilities","VSS/Platform/Util/Array","Analytics/Common/Utilities/DateSKParser"],(function(e,t,r,a,n,i,s,o,u){var l,y,d,c;t[c="BurndownConfigurationContracts"]={},(d=t[c].DateSampleMode||(t[c].DateSampleMode={}))[d.ByDateInterval=0]="ByDateInterval",d[d.ByIterations=1]="ByIterations",(y=t[c].DateSampleInterval||(t[c].DateSampleInterval={}))[y.Days=0]="Days",y[y.Weeks=1]="Weeks",y[y.Months=2]="Months",t.BurndownDataContract={},function(e){l=t[e]={};class a extends r.AnalyticsCacheableQueryBase{constructor(e,t){const r=Object.assign(Object.assign({},e),{batchRequestMode:1});super(t||a.Command,r)}}t[e].BurndownQueryBase=a,a.Command="Burndown"}("BurndownQueryBase"),function(e){t[e]={};class r extends l.BurndownQueryBase{static generateQueryOptions(e,t,r,u,l,y,d=!1){const c=(0,o.uniqueSort)(t.map((e=>e.projectId))),m=s.QueryUtilities.isInArray("ProjectSK",c,!1),p=(0,o.uniqueSort)(t.map((e=>e.teamId)));let I=`filter((${m}) and Teams/any(t:${s.QueryUtilities.isInArray("t/TeamSK",p,!1)}) and (StateCategory eq 'Completed'`;if(d&&(I+=" or StateCategory eq 'Resolved' or State eq 'Resolved'"),I+=`) and (${s.QueryUtilities.isInArray("WorkItemType",u,!0)})`,y.identifier===a.AggregationMode.Sum){I+=` and ${n.WitFieldUtilities.getFieldODataPropertyName(y.settings)} ne null`}const g=n.WitFieldUtilities.getFiltersClause(r,l);return g&&(I+=` and (${g})`),I+=")",i.forceProjectScoping(e,c,{entityType:"WorkItems",oDataVersion:s.latestODataVersion,$apply:I,$select:"WorkItemId"})}constructor(e,t,a,n,i,s,o=!1,u){super(r.generateQueryOptions(e,t,a,n,i,s,o),u)}getQueryName(){return"CompletedWorkItemIdsQuery"}interpretQueryResults(e){return e.value.map((e=>e.WorkItemId))}}t[e].CompletedWorkItemIdsQuery=r}("CompletedWorkItemsQuery"),function(e){t[e]={};class r extends l.BurndownQueryBase{static generateQueryOptions(e,t,r,u,l,y,d=!1){const c=t.map((e=>e.teamId)),m=(0,o.uniqueSort)(t.map((e=>e.projectId))),p=s.QueryUtilities.isInArray("t/TeamSK",c,!1),I=s.QueryUtilities.isInArray("ProjectSK",m,!1),g=s.QueryUtilities.isInArray("t/ProjectSK",m,!1);let Q=`filter((${I}) and Teams/any(t:${p}) and (${s.QueryUtilities.isInArray("WorkItemType",l,!0)}) and StateCategory ne null`;const S=n.WitFieldUtilities.getFiltersClause(r,y);if(S)if(S.includes("Tags/any(t:t/TagName")){Q+=` and (${S.slice(0,-1)} and ${g}))`}else Q+=` and (${S})`;Q+=")";let f="aggregate($count as AggregatedEffort)";if(u.identifier===a.AggregationMode.Sum){f=`aggregate(${n.WitFieldUtilities.getFieldODataPropertyName(u.settings)} with sum as AggregatedEffort)`}return Q+=d?`/groupby((StateCategory, State),${f})`:`/groupby((StateCategory),${f})`,i.forceProjectScoping(e,m,{entityType:"WorkItems",oDataVersion:s.latestODataVersion,$apply:Q})}constructor(e,t,a,n,i,s,o=!1,u){super(r.generateQueryOptions(e,t,a,n,i,s,o),u)}getQueryName(){return"CurrentEffortQuery"}interpretQueryResults(e){return e.value.filter((e=>null!=e.AggregatedEffort))}}t[e].CurrentEffortQuery=r}("CurrentEffortQuery"),function(e){t[e]={};class r extends l.BurndownQueryBase{static generateQueryOptions(e,t,r,l,y,d,c,m=!1){const p=(0,o.uniqueSort)(r.map((e=>e.teamId))),I=s.QueryUtilities.isInArray("t/TeamSK",p,!1),g=(0,o.uniqueSort)(r.map((e=>e.projectId))),Q=s.QueryUtilities.isInArray("ProjectSK",g,!1),S=s.QueryUtilities.isInArray("t/ProjectSK",g,!1),f=t.sampleDates.map((e=>u.DateSKParser.dateStringToDateSK(e))),D=Math.min(...f),$=s.QueryUtilities.generateDatesClause("DateSK",t);let W=`filter((${Q}) and Teams/any(t:${I}) and (${s.QueryUtilities.isInArray("WorkItemType",d,!0)}) and StateCategory ne null and (RevisedDateSK eq null or RevisedDateSK gt ${D}) and (${$})`;const A=n.WitFieldUtilities.getFiltersClause(l,c);if(A)if(A.includes("Tags/any(t:t/TagName")){W+=` and (${A.slice(0,-1)} and ${S}))`}else W+=` and (${A})`;W+=")";let P="aggregate($count as AggregatedEffort)";if(y.identifier===a.AggregationMode.Sum){P=`aggregate(${n.WitFieldUtilities.getFieldODataPropertyName(y.settings)} with sum as AggregatedEffort)`}return W+=m?`/groupby((DateSK,State,StateCategory,WorkItemType),${P})`:`/groupby((DateSK,StateCategory,WorkItemType),${P})`,i.forceProjectScoping(e,g,{entityType:"WorkItemSnapshot",oDataVersion:s.latestODataVersion,$apply:W})}constructor(e,t,a,n,i,s,o,u=!1,l){super(r.generateQueryOptions(e,t,a,n,i,s,o,u),l)}getQueryName(){return"EffortSnapshotsQuery"}interpretQueryResults(e){return e.value.filter((e=>null!=e.AggregatedEffort)).map((e=>({WorkItemType:e.WorkItemType,Date:u.DateSKParser.parseDateSKAsDateString(e.DateSK),StateCategory:e.StateCategory,AggregatedEffort:e.AggregatedEffort,State:e.State})))}}t[e].EffortSnapshotsQuery=r}("EffortSnapshotsQuery"),function(e){t[e]={};class r extends l.BurndownQueryBase{static generateQueryOptions(e,t,r){const a=`(${s.QueryUtilities.isInArray("ProjectSK",(0,o.uniqueSort)(t))}) and ${`date(StartDate) gt ${r}`}`;return i.forceProjectScoping(e,t,{entityType:"Iterations",oDataVersion:s.latestODataVersion,$filter:a,$orderby:"IsEnded,StartDate desc,EndDate desc,IterationName",$select:"IterationSK,IterationName,StartDate,EndDate,IsEnded"})}constructor(e,t,a,n){super(r.generateQueryOptions(e,t,a),n)}getQueryName(){return"ProjectsIterationsByDateQuery"}interpretQueryResults(e){return e.value.map((e=>({IterationSK:e.IterationSK,IterationName:e.IterationName,IterationPath:e.IterationPath,StartDateTimeOffset:e.StartDate,EndDateTimeOffset:e.EndDate,IsEnded:e.IsEnded}))).reverse()}}t[e].ProjectsIterationsByDateQuery=r}("ProjectsIterationsByDateQuery"),function(e){t[e]={};class r extends l.BurndownQueryBase{static generateQueryOptions(e,t,r){const a=`(${s.QueryUtilities.isInArray("ProjectSK",(0,o.uniqueSort)(t))}) and (${s.QueryUtilities.isInArray("IterationSK",r)})`;return i.forceProjectScoping(e,t,{entityType:"Iterations",oDataVersion:s.latestODataVersion,$filter:a,$orderby:"IsEnded,StartDate desc,EndDate desc,IterationName",$select:"IterationSK,IterationName,StartDate,EndDate,IsEnded"})}constructor(e,t,a,n){super(r.generateQueryOptions(e,t,a),n)}getQueryName(){return"ProjectsIterationsByIdQuery"}interpretQueryResults(e){return e.value.map((e=>({IterationSK:e.IterationSK,IterationName:e.IterationName,IterationPath:e.IterationPath,StartDateTimeOffset:e.StartDate,EndDateTimeOffset:e.EndDate,IsEnded:e.IsEnded}))).reverse()}}t[e].ProjectsIterationsByIdQuery=r}("ProjectsIterationsByIdQuery"),function(e){t[e]={};class r extends l.BurndownQueryBase{constructor(e,t,r,a,n,i,o=!1,l){super(u(e,s.latestODataVersion,!1,t,r,a,n,i,o),l)}getQueryName(){return"UnestimatedWorkItemIdsQuery"}interpretQueryResults(e){return e.value.map((e=>e.WorkItemId))}}t[e].UnestimatedWorkItemIdsQuery=r;class a extends l.BurndownQueryBase{constructor(e,t,r,a,n,i,o=!1,l){super(u(e,s.latestODataVersion,!0,t,r,a,n,i,o),l)}getQueryName(){return"UnestimatedWorkItemsCountQuery"}interpretQueryResults(e){return null!=e.value&&e.value.length>0?e.value[0].Count:0}}function u(e,t,r,a,u,l,y,d,c=!1){const m=(0,o.uniqueSort)(a.map((e=>e.teamId))),p=s.QueryUtilities.isInArray("t/TeamSK",m,!1),I=(0,o.uniqueSort)(a.map((e=>e.projectId))),g=s.QueryUtilities.isInArray("ProjectSK",I,!1),Q=n.WitFieldUtilities.getFiltersClause(u,y);let S=`filter((${g}) and Teams/any(t:${p}) and (StateCategory ne 'Completed'`;c&&(S+=" and StateCategory ne 'Resolved' and State ne 'Resolved'"),S+=`) and ${n.WitFieldUtilities.getFieldODataPropertyName(d)} eq null and (${s.QueryUtilities.isInArray("WorkItemType",l,!0)})`,Q&&(S+=` and (${Q})`),S+=")",r&&(S+="/aggregate($count as Count)");const f=r?void 0:"WorkItemId";return i.forceProjectScoping(e,I,{entityType:"WorkItems",oDataVersion:t,$apply:S,$select:f})}t[e].UnestimatedWorkItemsCountQuery=a}("UnestimatedWorkItemsQueries"),function(e){t[e]={};class r extends l.BurndownQueryBase{static generateQueryOptions(e,t,r,l,y,d,c,m,p=!1){const I=(0,o.uniqueSort)(r.map((e=>e.teamId))),g=s.QueryUtilities.isInArray("t/TeamSK",I,!1),Q=(0,o.uniqueSort)(r.map((e=>e.projectId))),S=s.QueryUtilities.isInArray("ProjectSK",Q,!1),f=u.DateSKParser.dateStringToDateSK(t),D=`DateSK eq ${f}`,$=n.WitFieldUtilities.getFiltersClause(l,y);let W=`filter((${S}) and Teams/any(t:${g}) and (StateCategory ${c?"eq":"ne"} 'Completed'`;if(p&&(W+=` ${c?"or":"and"} StateCategory ${c?"eq":"ne"} 'Resolved' ${c?"or":"and"} State ${c?"eq":"ne"} 'Resolved'`),W+=`) and (RevisedDateSK eq null or RevisedDateSK gt ${f}) and (${D}) and (${s.QueryUtilities.isInArray("WorkItemType",m,!0)})`,$&&(W+=` and (${$})`),d.identifier===a.AggregationMode.Sum){W+=` and ${n.WitFieldUtilities.getFieldODataPropertyName(d.settings)} ne null`}return W+=")",i.forceProjectScoping(e,Q,{entityType:"WorkItemSnapshot",oDataVersion:s.latestODataVersion,$apply:W,$select:"WorkItemId"})}constructor(e,t,a,n,i,s,o,u,l=!1,y){super(r.generateQueryOptions(e,t,a,n,i,s,o,u,l),y)}getQueryName(){return"WorkItemIdsSnapshotQuery"}interpretQueryResults(e){return e.value.map((e=>e.WorkItemId))}}t[e].WorkItemIdsSnapshotQuery=r}("WorkItemIdsSnapshotQuery"),function(e){t[e]={};class r extends l.BurndownQueryBase{constructor(e,t,a,n){super(r.generateQueryOptions(e,t,a),n)}static generateQueryOptions(e,t,r){const a=(0,o.uniqueSort)(t);let n=`filter((${s.QueryUtilities.isInArray("ProjectSK",a,!1)})`;return r&&r.length>0&&(n+=` and (${s.QueryUtilities.isInArray("WorkItemType",r,!0)})`),n+=")/groupby((FieldName,FieldType,FieldReferenceName))",i.forceProjectScoping(e,a,{entityType:"WorkItemTypeFields",oDataVersion:s.latestODataVersion,$apply:n,$orderby:"FieldName"})}getQueryName(){return"WorkItemTypeFieldsQuery"}interpretQueryResults(e){const t=[];return e.value.map((e=>{t.push(this.translateDescriptor(e))})),t}translateDescriptor(e){const t=r.QuotableTypes.indexOf(e.FieldType)>=0;let a=n.WitFieldUtilities.getFieldODataPropertyName(e.FieldReferenceName);r.AnalyticsQueryPathDict.hasOwnProperty(e.FieldReferenceName)&&(a=r.AnalyticsQueryPathDict[e.FieldReferenceName]);const i=r.defaultFieldExtractor;return{FieldName:e.FieldName,FieldReferenceName:e.FieldReferenceName,FieldType:e.FieldType,UseQuotes:t,AnalyticsFilterName:a,GetAnalyticsQueryValueFunc:i}}}t[e].WorkItemTypeFieldsQuery=r,r.QuotableTypes=["DateTime","PlainText","String","Html","TreePath"],r.AnalyticsQueryPathDict={"System.AreaPath":"Area/AreaPath","System.IterationPath":"Iteration/IterationPath"},r.defaultFieldExtractor=e=>e.queryValue}("WorkItemTypeFieldsQuery")}),["BurndownConfigurationContracts","BurndownDataContract","BurndownQueryBase","CompletedWorkItemsQuery","CurrentEffortQuery","EffortSnapshotsQuery","ProjectsIterationsByDateQuery","ProjectsIterationsByIdQuery","UnestimatedWorkItemsQueries","WorkItemIdsSnapshotQuery","WorkItemTypeFieldsQuery"]),document.dispatchEvent(new CustomEvent("scriptLoaded",{cancelable:!1,detail:{id:"ms.vss-analytics.burndown-queries"}}));