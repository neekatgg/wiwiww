"use strict";define("Analytics/Boards/VelocityQueries",["require","exports","Analytics/Common/AnalyticsCacheableQueryBase","Analytics/Common/Utilities/QueryUtilities","Analytics/Boards/BoardsQueries/DataContracts","Analytics/Boards/BoardsQueries/WitFieldUtilities","Analytics/Common/Utilities/DateSKParser"],(function(e,t,a,r,n,i,s){var o,y,l,u;!function(e){o=t[e]={},t[e].addDays=function(e,t){return new Date(e.getFullYear(),e.getMonth(),e.getDate()+t,e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds())};class r extends a.AnalyticsCacheableQueryBase{constructor(e,t){super(e,Object.assign(Object.assign({},t),{batchRequestMode:1}))}}t[e].VelocityQueryBase=r}("VelocityQueryBase"),function(e){t[e]={};class a extends o.VelocityQueryBase{constructor(e,t,r){super(e,a.generateQueryOptions(t)),this.queryName=r}static generateQueryOptions(e){return{entityType:"WorkItemTypeFields",oDataVersion:r.latestODataVersion,project:e,$filter:"(FieldType eq 'Integer' or FieldType eq 'Double') and (not startswith(FieldReferenceName,'System.'))"}}getQueryName(){return this.queryName||"AggregationWorkItemTypeFieldsQuery"}}t[e].AggregationWorkItemTypeFieldsQuery=a}("AggregationWorkItemTypeFieldsQuery"),function(e){y=t[e]={};t[e].VelocityDataHelper=class{static getQueryAggregation(e){switch(e.identifier){case n.AggregationMode.Sum:const t=i.WitFieldUtilities.getFieldODataPropertyName(e.settings);if(null==t||0===t.trim().length)throw new Error(`No property name found for aggregation setting: '${e.settings}'`);return`aggregate(${t} with sum as AggregationResult)`;case n.AggregationMode.Count:return"aggregate($count as AggregationResult)";default:throw new Error(`Unexpected aggregation mode: '${e.identifier}'`)}}}}("VelocityDataHelper"),function(e){l=t[e]={};class a extends o.VelocityQueryBase{constructor(e,t,r,n,i,s,o=!1,y,l){super(e,a.generateQueryOptions(t,r,n,i,s,o,y)),this.queryName=l}static generateQueryOptions(e,t,n,i,s,o=!1,l){const u=a.generateIterationAndCompletedDateClause(n,l);let g=`filter(Teams/any(t:t/TeamSK eq ${t}) and (${r.QueryUtilities.isInArray("WorkItemType",s,!0)}) and (StateCategory eq 'Completed'`;o&&(g+=" or StateCategory eq 'Resolved' or State eq 'Resolved'"),g+=`) and ${u}`;return g+=`)/groupby((StateCategory, State, IterationSK),${y.VelocityDataHelper.getQueryAggregation(i)})`,{entityType:"WorkItems",oDataVersion:r.latestODataVersion,project:e,$apply:g}}static getDelayedDateTimeOffset(e,t){const a=new Date(e);return(0,o.addDays)(a,t).toISOString()}static generateIterationAndCompletedDateClause(e,t){let n="";if(null==t||0===t){n=`(${r.QueryUtilities.isInArray("IterationSK",e.filter((e=>e.IterationSK)).map((e=>e.IterationSK)))}) and (CompletedDate gt Iteration/EndDate or StateChangeDate gt Iteration/EndDate)`}else{n=`(${r.QueryUtilities.isInArray("(IterationSK",e.filter((e=>e.EndDateTimeOffset)).map((e=>{const r=a.getDelayedDateTimeOffset(e.EndDateTimeOffset,t);return`${e.IterationSK} and (CompletedDate gt ${r} or StateChangeDate gt ${r}))`})))})`}return n}getQueryName(){return this.queryName||"CompletedLateMetastateByIterationsQuery"}interpretQueryResults(e){return e.value.filter((e=>null!=e.AggregationResult))}}t[e].CompletedLateMetastateByIterationsQuery=a}("CompletedLateMetastateByIterationsQuery"),function(e){t[e]={};class a extends o.VelocityQueryBase{constructor(e,t,r,n,i,s=!1,o,y){super(e,a.generateQueryOptions(t,r,n,i,s,o)),this.queryName=y}static generateQueryOptions(e,t,a,n,i=!1,s){const o=[e],y=l.CompletedLateMetastateByIterationsQuery.generateIterationAndCompletedDateClause(o,s);let u=`filter(Teams/any(t:t/TeamSK eq ${a}) and (${r.QueryUtilities.isInArray("WorkItemType",n,!0)}) and (StateCategory eq 'Completed'`;return i&&(u+=" or StateCategory eq 'Resolved' or State eq 'Resolved'"),u+=`) and ${y})`,{entityType:"WorkItems",oDataVersion:r.latestODataVersion,project:t,$apply:u,$select:"WorkItemId, StateCategory, State"}}getQueryName(){return this.queryName||"CompletedLateMetastateByIterationDetailsQuery"}}t[e].CompletedLateMetastateByIterationDetailsQuery=a}("CompletedLateMetastateByIterationDetailsQuery"),function(e){t[e]={};class a extends o.VelocityQueryBase{constructor(e,t,r,n,i,s){super(e,a.generateQueryOptions(t,r,n,i)),this.queryName=s}static generateQueryOptions(e,t,a,n){const i=r.QueryUtilities.isInArray("IterationSK",[e]),s=`filter(Teams/any(t:t/TeamSK eq ${a}) and (${r.QueryUtilities.isInArray("WorkItemType",n,!0)}) and (${i}) and StateCategory ne null)`;return{entityType:"WorkItems",oDataVersion:r.latestODataVersion,project:t,$apply:s,$select:"WorkItemId, StateCategory, State"}}getQueryName(){return this.queryName||"MetastateByIterationDetailsQuery"}}t[e].MetastateByIterationDetailsQuery=a}("MetastateByIterationDetailsQuery"),function(e){t[e]={};class a extends o.VelocityQueryBase{constructor(e,t,r,n,i,s,o){super(e,a.generateQueryOptions(t,r,n,i,s)),this.queryName=o}static generateQueryOptions(e,t,a,n,i){const s=r.QueryUtilities.isInArray("IterationSK",a);let o=`filter(Teams/any(t:t/TeamSK eq ${t}) and (${r.QueryUtilities.isInArray("WorkItemType",i,!0)}) and (${s}) and StateCategory ne null`;return o+=`)/groupby((StateCategory, State, IterationSK),${y.VelocityDataHelper.getQueryAggregation(n)})`,{entityType:"WorkItems",oDataVersion:r.latestODataVersion,project:e,$apply:o}}getQueryName(){return this.queryName||"MetastateByIterationsQuery"}interpretQueryResults(e){return e.value.filter((e=>null!=e.AggregationResult))}}t[e].MetastateByIterationsQuery=a}("MetastateByIterationsQuery"),function(e){u=t[e]={};class a extends o.VelocityQueryBase{constructor(e,t,r,n,i,s,o,y){super(e,a.generateQueryOptions(t,r,n,i,s,o)),this.queryName=y}static generateQueryOptions(e,t,n,i,s,o){const l=`(${a.isInAnyIterationAtStartDate(n,o)})`;let u=`filter(Teams/any(t:t/TeamSK eq ${t}) and (${r.QueryUtilities.isInArray("WorkItemType",s,!0)}) and (RevisedDateSK eq null or RevisedDateSK gt ${a.getEarliestIterationStartDateSK(n,o)}) and ${l} and StateCategory ne null`;return u+=`)/groupby((IterationSK),${y.VelocityDataHelper.getQueryAggregation(i)})`,{entityType:"WorkItemSnapshot",oDataVersion:r.latestODataVersion,project:e,$apply:u}}static getEarliestIterationStartDateSK(e,t){const r=e.filter((e=>e.StartDateTimeOffset)).map((e=>a.getDelayedDateSK(e.StartDateTimeOffset,t)));return Math.min(...r)}static getDelayedDateSK(e,t){const a=r.QueryUtilities.parseAnalyticsDateTime(e,!0),n=(0,o.addDays)(a,t);return s.DateSKParser.dateStringToDateSK(s.DateSKParser.convertDateToDateString(n))}static isInAnyIterationAtStartDate(e,t){let n=[];return n.push(r.QueryUtilities.isInArray("(IterationSK",e.filter((e=>e.StartDateTimeOffset)).map((e=>{const r=a.getDelayedDateSK(e.StartDateTimeOffset,t);return`${e.IterationSK} and DateSK eq ${r})`})))),n.push(r.QueryUtilities.isInArray("IterationSK",e.map((e=>`${e.IterationSK}`)))),n.push(r.QueryUtilities.isInArray("DateSK",e.filter((e=>e.StartDateTimeOffset)).map((e=>`${a.getDelayedDateSK(e.StartDateTimeOffset,t)}`)))),n=n.map((e=>`(${e})`)),`(${n.join(" and ")})`}getQueryName(){return this.queryName||"PlannedWorkByDayQuery"}interpretQueryResults(e){return e.value.filter((e=>null!=e.AggregationResult))}}t[e].PlannedWorkByDayQuery=a}("PlannedWorkByDayQuery"),function(e){t[e]={};class a extends o.VelocityQueryBase{constructor(e,t,r,n,i,s,o){super(e,a.generateQueryOptions(t,r,n,i,s)),this.queryName=o}static generateQueryOptions(e,t,a,n,i){const s=`(${u.PlannedWorkByDayQuery.isInAnyIterationAtStartDate([a],i)})`,o=`filter(Teams/any(t:t/TeamSK eq ${t}) and (${r.QueryUtilities.isInArray("WorkItemType",n,!0)}) and (RevisedDateSK eq null or RevisedDateSK gt ${u.PlannedWorkByDayQuery.getDelayedDateSK(a.StartDateTimeOffset||"",i)}) and ${s} and StateCategory ne null)`;return{entityType:"WorkItemSnapshot",oDataVersion:r.latestODataVersion,project:e,$apply:o,$select:"WorkItemId"}}getQueryName(){return this.queryName||"PlannedWorkByDayDetailsQuery"}}t[e].PlannedWorkByDayDetailsQuery=a}("PlannedWorkByDayDetailsQuery")}),["VelocityQueryBase","AggregationWorkItemTypeFieldsQuery","VelocityDataHelper","CompletedLateMetastateByIterationsQuery","CompletedLateMetastateByIterationDetailsQuery","MetastateByIterationDetailsQuery","MetastateByIterationsQuery","PlannedWorkByDayQuery","PlannedWorkByDayDetailsQuery"]),document.dispatchEvent(new CustomEvent("scriptLoaded",{cancelable:!1,detail:{id:"ms.vss-analytics.velocity-queries"}}));