"use strict";define("Wit/Common/WorkItemTypesService",["require","exports","VSS/Platform/Context","Wit/Clients/Wit/RestClient/WorkItemTracking","Agile/Common/Redux/BacklogConfiguration/BacklogConfigurationContracts"],(function(e,t,r,a,o){!function(e){var s;t[e]={},function(e){e.hidden="Microsoft.HiddenCategory",e.testCase="Microsoft.TestCaseCategory",e.testPlan="Microsoft.TestPlanCategory",e.testSuite="Microsoft.TestSuiteCategory",e.testSharedStep="Microsoft.SharedStepCategory",e.testSharedParameter="Microsoft.SharedParameterCategory",e.defaultExcludedCategories=[e.hidden,e.testCase,e.testPlan,e.testSuite,e.testSharedStep,e.testSharedParameter]}(s=t[e].WorkItemCategoryConstants||(t[e].WorkItemCategoryConstants={}));class i extends r.VssService{constructor(){super(...arguments),this.categoriesByProject=new Map,this.categoriesPromiseMap=new Map,this.workItemTypesByProject=new Map,this.workItemTypesPromiseMap=new Map,this.workItemTypeDataByProject=new Map,this.workItemTypeDataPromiseMap=new Map}_serviceStart(e){super._serviceStart(e)}async getVisibleWorkItemTypes(e){return await this.getWorkItemTypes(e,s.defaultExcludedCategories)}async getWorkItemTypes(e,t){const[r,a]=await Promise.all([this.loadCategories(e),this.loadWorkItemTypes(e)]),o=new Set;return null==t||t.forEach((e=>{const t=r.find((t=>e===t.referenceName));null==t||t.workItemTypes.forEach((e=>o.add(e.name)))})),o.size>0?a.filter((e=>!o.has(e))):a}async getWorkItemTypeData(e,t){const r=null!=t?t:await this.getWorkItemTypes(e);return this.loadWorkItemTypeData(e,r)}checkCompletedState(e,t,r){const a=this.getStateCompareValue(e,t,r);return void 0!==a&&a===o.WorkItemStateCategory.Completed}getStateCompareValue(e,t,r){const a=r.workItemTypeMappedStates.find((e=>e.workItemTypeName===t));if(!a||!e)return;return a.states[e]}async loadCategories(e){let t=this.categoriesByProject.get(e);if(!t){let r=this.categoriesPromiseMap.get(e);if(!r){r=(0,a.getWorkItemTrackingClient)(this.pageContext).getWorkItemTypeCategories(e)}t=await r,t&&this.categoriesByProject.set(e,t)}return t}async loadWorkItemTypes(e){var t;let r=this.workItemTypesByProject.get(e);if(!r){let a=this.workItemTypesPromiseMap.get(e);if(!a){a=this.pageContext.getService("IWorkItemDataManager").beginGetFieldProjectData(e)}const o=await a;if(o){const a=null===(t=null==o?void 0:o.projects)||void 0===t?void 0:t.find((t=>t.guid===e));r=(null==a?void 0:a.workItemTypes)||[],this.workItemTypesByProject.set(e,r)}}return r||[]}async loadWorkItemTypeData(e,t){const r=`${e}:${t.join(";")}`;let a=this.workItemTypeDataByProject.get(r);if(!a){let o=this.workItemTypeDataPromiseMap.get(e);if(!o){o=this.pageContext.getService("IWorkItemDataManager").beginGetWorkItemTypeData(e,t)}a=await o,a&&this.workItemTypeDataByProject.set(r,a)}return a||[]}}r.Services.add("IWorkItemTypesService",{serviceFactory:i})}("IWorkItemTypesService")}),["IWorkItemTypesService"]),document.dispatchEvent(new CustomEvent("scriptLoaded",{cancelable:!1,detail:{id:"ms.vss-work-web.work-item-types-service"}}));